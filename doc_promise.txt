                          PROMISE

Promise(Обещание)то объект который содержит будущее значение асинхронной операции. Например, если вы запрашиваете некоторые данные с сервера, промис обещает нам получить эти данные, которые мы сможем использовать в будущем.

Вначале промис имеет статус pending ("ожидание"), затем – одно из: fulfilled ("выполнено успешно")
 или rejected ("выполнено с ошибкой️").
 Pending -промис ожидает, если результат не готов. То есть, ожидает завершение чего-либо (например, завершения асинхронной операции).
Fulfilled-Промис решен, если результат доступен. То есть, что-то завершило свое выполнение(например, асинхронная операция) и все прошло успешно.
Rejected-Промиc отклонен, если произошла ошибка в процессе выполнения.


Синтаксис promise.

const promise = new Promise((resolve, reject) => {
  if (allWentWell) {
    resolve('Все прошло отлично!')
  } else {
    reject('Что-то пошло не так')
  }
})

Исполнительная функция️ выполняется сразу же после создания промиса. Промис становится выполненным при помощи вызова resolve(), а отклоненным при помощи reject().




Методы промиса:

1)THEN
Метод then используется для запуска функций️ при положительном и отрицательном результате промиса.

Синтаксис метода then:

promise.then(
  function (result) {

  },
  function (error) {

  }
)



2) CATCH
Для отлова ошибок️ используется метод catch. Его можно использовать вместо метода then для вывода сообщений  об ошибке️.

Синтаксис  метода catch:

let promise = new Promise((resolve, reject) => {
  setTimeout(() => reject(new Error('Ошибка!')), 1000)
  promise.catch(alert)
})



3)PROMISE.ALL
Этот метод берет массив промисов и возвращает🔄 🆕 новый промис, который будет выполненным, когда все промисы внутри массива выполнены или отклонен, как только встречается промис, который отклоняется.
const promise1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('Promise1 выполнен')
  }, 2000)
})
const promise2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('Promise2 выполнен')
  }, 1500)
})
Promise.all([promise1, promise2])
  .then(data => console.log(data[0], data[1]))
  .catch(error => console.log(error))